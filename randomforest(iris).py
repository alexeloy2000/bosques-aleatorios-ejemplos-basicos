# -*- coding: utf-8 -*-
"""RandomForest(Iris).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mljvwdTVAlG3Dw8e2ZwCeNbVQ1sfXFAe

##Comprender los clasificadores de bosques aleatorios
#Construyendo un clasificador usando Scikit-learn
Construirá un modelo en el conjunto de datos de flores de iris, que es un conjunto de clasificación muy famoso. Comprende la longitud del sépalo, el ancho del sépalo, la longitud del pétalo, el ancho del pétalo y el tipo de flores. Hay tres especies o clases: setosa, versicolor y virginia. Construirás un modelo para clasificar el tipo de flor. El conjunto de datos está disponible en la biblioteca scikit-learn o puede descargarlo del Repositorio de aprendizaje automático de UCI.

Paso 01: Comience importando la biblioteca de conjuntos de datos de scikit-learn y cargue el conjunto de datos de iris con load_iris().
"""

#Import scikit-learn dataset library
from sklearn import datasets

#Load dataset
iris = datasets.load_iris()

"""Paso 02: Puede imprimir el objetivo y los nombres de las funciones para asegurarse de tener el conjunto de datos correcto, como tal:"""

# print the label species(setosa, versicolor,virginica)
print(iris.target_names)

# print the names of the four features
print(iris.feature_names)

"""Paso 03: Es una buena idea explorar siempre un poco los datos para saber con qué está trabajando. Aquí, puede ver que se imprimen las primeras cinco filas del conjunto de datos, así como la variable de destino para todo el conjunto de datos."""

# print the iris data (top 5 records)
print(iris.data[0:5])

# print the iris labels (0:setosa, 1:versicolor, 2:virginica)
print(iris.target)

"""Paso 04: Aquí, puede crear un DataFrame del conjunto de datos del iris de la siguiente manera."""

# Creating a DataFrame of given iris dataset.
import pandas as pd
data=pd.DataFrame({
    'sepal length':iris.data[:,0],
    'sepal width':iris.data[:,1],
    'petal length':iris.data[:,2],
    'petal width':iris.data[:,3],
    'species':iris.target
})
data.head()

"""Paso 05: Primero, separe las columnas en variables dependientes e independientes (o características y etiquetas). Luego, divide esas variables en un conjunto de entrenamiento y prueba."""

# Import train_test_split function
from sklearn.model_selection import train_test_split

X=data[['sepal length', 'sepal width', 'petal length', 'petal width']]  # Features
y=data['species']  # Labels

# Split dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) # 70% training and 30% test

"""Paso 06: Después de dividir, entrenará el modelo en el conjunto de entrenamiento y realizará predicciones en el conjunto de prueba."""

#Import Random Forest Model
from sklearn.ensemble import RandomForestClassifier

#Create a Gaussian Classifier
clf=RandomForestClassifier(n_estimators=100)

#Train the model using the training sets y_pred=clf.predict(X_test)
clf.fit(X_train,y_train)

y_pred=clf.predict(X_test)

"""paso 07: Después del entrenamiento, verifique la precisión utilizando valores reales y previstos."""

#Import scikit-learn metrics module for accuracy calculation
from sklearn import metrics
# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

"""paso 08: También puede hacer una predicción para un solo elemento, por ejemplo:

*   longitud del sépalo = 3
*   ancho del sépalo = 5
*   longitud del pétalo = 4
*   ancho del pétalo = 2

Ahor puedes saber que tipo de flor es
"""

clf.predict([[3, 5, 4, 2]])

"""Aquí, 1 indica el tipo de flor Versicolor.

#Encontrar funciones importantes en Scikit-learn
Aquí, encontrará características importantes o seleccionará características en el conjunto de datos de IRIS. En scikit-learn, puede realizar esta tarea en los siguientes pasos:

*   Primero, necesita crear un modelo de bosques aleatorios
*   En segundo lugar, utilice la variable de importancia de la característica para ver las puntuaciones de importancia de la característica.
*   En tercer lugar, visualice estos puntajes utilizando la biblioteca seaborn.
"""

from sklearn.ensemble import RandomForestClassifier

#Create a Gaussian Classifier
clf=RandomForestClassifier(n_estimators=100)

#Train the model using the training sets y_pred=clf.predict(X_test)
clf.fit(X_train,y_train)

import pandas as pd
feature_imp = pd.Series(clf.feature_importances_,index=iris.feature_names).sort_values(ascending=False)
feature_imp

"""También puede visualizar la importancia de la característica. Las visualizaciones son fáciles de entender e interpretar.

Para la visualización, puede utilizar una combinación de matplotlib y seaborn. Debido a que seaborn se basa en matplotlib, ofrece una serie de temas personalizados y proporciona tipos de tramas adicionales. Matplotlib es un superconjunto de seaborn y ambos son igualmente importantes para una buena visualización.
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
# Creating a bar plot
sns.barplot(x=feature_imp, y=feature_imp.index)
# Add labels to your graph
plt.xlabel('Feature Importance Score')
plt.ylabel('Features')
plt.title("Visualizing Important Features")
plt.legend()
plt.show()

"""#Generación del modelo en funciones seleccionadas

Aquí, puede eliminar la característica de "ancho de sépalo" porque tiene muy poca importancia y seleccionar las 3 características restantes.
"""

# Import train_test_split function
from sklearn.model_selection import train_test_split
# Split dataset into features and labels
X=data[['petal length', 'petal width','sepal length']]  # Removed feature "sepal length"
y=data['species']                                       
# Split dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.70, random_state=5) # 70% training and 30% test

"""Después de dividir, generará un modelo sobre las características del conjunto de entrenamiento seleccionado, realizará predicciones sobre las características del conjunto de prueba seleccionado y comparará los valores reales y previstos."""

from sklearn.ensemble import RandomForestClassifier

#Create a Gaussian Classifier
clf=RandomForestClassifier(n_estimators=100)

#Train the model using the training sets y_pred=clf.predict(X_test)
clf.fit(X_train,y_train)

# prediction on test set
y_pred=clf.predict(X_test)

#Import scikit-learn metrics module for accuracy calculation
from sklearn import metrics
# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

"""#Conclusion:
En este pequeño ejercicio se ha aprendido a construir modelos, evaluar y encontrar características importantes en scikit-learn.
"""